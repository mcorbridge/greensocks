{
  "name": "bezier-easing",
  "version": "0.4.4",
  "description": "Bezier Curve based easing functions for Javascript animations",
  "keywords": [
    "cubic-bezier",
    "bezier",
    "easing",
    "interpolation",
    "animation",
    "timing",
    "timing-function"
  ],
  "author": {
    "name": "Gaëtan Renaudeau",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "mocha": "1.16.x",
    "assert": "1.0.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gre/bezier-easing.git"
  },
  "readme": "bezier-easing [![Build Status](https://travis-ci.org/gre/bezier-easing.png)](https://travis-ci.org/gre/bezier-easing)\n===\n\nBezierEasing provides interpolation to make Bezier Curve based easing functions for your JavaScript animations.\n\nMIT License.\n\n[![npm install bezier-easing](https://nodei.co/npm/bezier-easing.png)](http://npmjs.org/package/bezier-easing)\n\nIt is the equivalent to [CSS Transitions' `transition-timing-function`](http://www.w3.org/TR/css3-transitions/#transition-timing-function-property).\n\nSee this schema from the CSS spec:\n\n[![TimingFunction.png](http://www.w3.org/TR/css3-transitions/TimingFunction.png)](http://www.w3.org/TR/css3-transitions/#transition-timing-function-property)\n\nIn CSS you can define easing with `cubic-bezier(0.42, 0, 0.58, 1)`, \nwith BezierEasing, you can define it using `BezierEasing(0.42, 0, 0.58, 1)` which retuns a function taking an X and computing the Y interpolated easing value (see the schema).\n\n**Example:**\n\n* [See also glsl-transition example](http://greweb.me/glsl-transition/).\n* [See it for real here](http://greweb.me/bezier-easing/example).\n\n```javscript\nvar canvas = document.getElementById(\"viewport\"), ctx = canvas.getContext(\"2d\");\n\nanimate(moveRectangle, 2000, BezierEasing(0.25, 0.1, 0.0, 1.0));\n\nfunction moveRectangle (p) { // p move from 0 to 1\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = \"hsl(\"+Math.round(255*p)+\",80%,50%)\";\n  var w = 50;\n  var h = 50 + p * (canvas.height - 50);\n  ctx.fillRect((canvas.width-w) * p, (canvas.height-h)*0.5, w, h);\n}\n\nfunction animate (render, duration, easing) {\n  var start = Date.now();\n  (function loop () {\n    var p = (Date.now()-start)/duration;\n    if (p > 1) {\n      render(1);\n    }\n    else {\n      requestAnimationFrame(loop);\n      render(easing(p));\n    }\n  }());\n}\n```\n\nPredefined BezierEasing functions\n---\n\nWe have defined for you all existing CSS `transition-timing-function` :\n\n```javscript\nBezierEasing.css = {\n  \"ease\":        BezierEasing(0.25, 0.1, 0.25, 1.0), \n  \"linear\":      BezierEasing(0.00, 0.0, 1.00, 1.0),\n  \"ease-in\":     BezierEasing(0.42, 0.0, 1.00, 1.0),\n  \"ease-out\":    BezierEasing(0.00, 0.0, 0.58, 1.0),\n  \"ease-in-out\": BezierEasing(0.42, 0.0, 0.58, 1.0)\n};\n```\n\nPerfect if you want for instance to make an abstraction on top of CSS and JavaScript animations.\n\nRun tests\n===\n\n[![Build Status](https://travis-ci.org/gre/bezier-easing.png)](https://travis-ci.org/gre/bezier-easing)\n\n```\nnpm test\n```\n\nWho use it?\n===\n\n- [Apple®](http://images.apple.com/v/mac-pro/home/b/scripts/overview.js) :)\n- [Velocity.js](https://github.com/julianshapiro/velocity)\n\nMore informations\n===\n\nImplementation based on this [article](http://greweb.me/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/).\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gre/bezier-easing/issues"
  },
  "_id": "bezier-easing@0.4.4",
  "dist": {
    "shasum": "266ab5ca9b7eade6924d1e636066e408e4aeb417"
  },
  "_from": "bezier-easing@",
  "_resolved": "https://registry.npmjs.org/bezier-easing/-/bezier-easing-0.4.4.tgz"
}
